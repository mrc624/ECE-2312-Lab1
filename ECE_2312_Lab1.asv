
clear all
load handel; % the signal is in y and sampling freq in Fs
%sound(y,Fs); pause(10); % Play the original sound
alpha = 0.9; D = 4196; % Echo parameters
b = [1,zeros(1,D),alpha]; % Filter parameters
x = filter(b,1,y); % Generate sound plus its echo
%sound(x,Fs); % Play sound with echo

%Echo Removal: An echo removal system is given by the difference equation
% w[n] + Î±w[n âˆ’ D] = x[n]
% where x[n] is the echo-corrupted sound signal and w[n] is the output
% sound signal, which has the echo (hopefully) removed. Note again that
% this system is very simple to implement in software or hardware.
w = filter(1,b,x);
%sound(w,Fs)
t = tiledlayout(1,2);%graph formatting
a1 = nexttile; %graph formatting
title('Impulse response h(n)')
xlabel('n') %n is the x-axis
ylabel('Response') %response is the y-axis
impz(b, 1, 0:4197) %run impz
a2 = nexttile;%graph formatting

n = -20:120
unit = unit_step(n)

h = filter(b, 1, unit)

stem(n, h, 'filled')



%{
n = -20:1:120; %defining the range
unit = zeros(1, 141); %creating an array to store the response
hFilt = filter(b, 1, unit)
unit = unit_step(hFilt);
plot(a2,-20:120, unit) %creating the unit graph
xlabel('n (samples)') % n is x-axis
ylabel('Response')% response is y-axis
title('Step Response h(n)')
%}
function u = unit_step(n)
    u = (n >= 0);
end

